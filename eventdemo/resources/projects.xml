<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!--
Copyright 2014-2015 CyberVision, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<projectsConfig>
    <project id="event_demo_java">
        <name>Event demo</name>
        <description>Kaa Event subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the Java SDK.

<h2>Installation</h2>
Download the jar file to your device by clicking the "Binary" button on the left. Make sure that you have Java installed on your device. Run the application using the following command in the console:
<pre>
$ java -jar EventDemo.jar
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>
For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
        	]]>
        </details>
        <platform>JAVA</platform>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <sourceArchive>java/event_demo.tar.gz</sourceArchive>
        <projectFolder>JEventDemo</projectFolder>
        <sdkLibDir>JEventDemo/lib</sdkLibDir>
        <destBinaryFile>JEventDemo/build/jar/EventDemo.jar</destBinaryFile>
    </project>
    <project id="event_demo_c">
        <name>Event demo</name>
        <description>Kaa Event subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.<br/><br/>

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
        	]]>
        </details>
        <platform>C</platform>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <sourceArchive>c/event_demo.tar.gz</sourceArchive>
        <projectFolder>CEventDemo</projectFolder>
        <sdkLibDir>CEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="event_demo_cpp">
        <name>Event demo</name>
        <description>Kaa Event subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Event subsystem on the C++ SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Event demo" app on one endpoint, it will send an event to another endpoint, thus demonstrating how devices can interoperate with each other.

Now it's time to test things out: start two application instances. By default, the application stores the state information in the same folder where the application was started. Therefore, you should start a new application instance from a different folder in order to avoid conflicts between the instances. Once the application instances are started, you will see them exchanging events. You can also start the "Event demo" application on different platforms to verify that events are delivered across the platforms.<br/><br/>

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Event subsystem please refer to the corresponding programming guide and design reference sections.
        	]]>
        </details>
        <platform>CPP</platform>
        <features>EVENT</features>
        <complexity>BASIC</complexity>
        <sourceArchive>cpp/event_demo.tar.gz</sourceArchive>
        <projectFolder>CppEventDemo</projectFolder>
        <sdkLibDir>CppEventDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
</projectsConfig>