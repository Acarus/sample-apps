<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--

     Copyright 2014-2016 CyberVision, Inc.

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.

-->

<projectsConfig
        xmlns="http://www.kaaproject.org"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.kaaproject.org ../../common/src/main/resources/demo/projects/demo_projects_schema.xsd">
    <project id="notification_demo_java">
        <name>Notification Java demo</name>
        <description>Kaa Notification subsystem demo app based on Java SDK</description>
        <details>
            <![CDATA[
<head>
	<base href="http://kaaproject.github.io/kaa/docs/" target="_blank">
</head>

<body>
	<p>
	    This sample application uses the <b>Notification Extension</b> based on the <a href="./Glossary/#sdk-type">Kaa Java SDK</a>.
		This extension enables <a href="./Glossary/#kaa-client">Kaa client</a> to receive <a href="./Programming-guide/Key-platform-features/Notifications">notifications</a> from <a href="./Glossary/#kaa-server">Kaa server</a>.
	</p>
	
	To implement that feature for Java SDK, the following classes and methods are used:
	
	<ul>
		<li>
			<code>NotificationTopicListListener</code> class gets notification topics after they are updated on the server side.
		</li>
		<li>
			<code>NotificationListener</code> class gets notification messages.
			It is used by Kaa client to receive all notification messages for the endpoint.
		</li>
		<li>
			<code>getTopics</code> method returns the list of available notification topics upon Kaa client startup.
			Use this method only after starting up the Kaa client.
		</li>
		<li>
			<code>subscribeToTopic</code> method subscribes an endpoint to an optional notification topic available.
		</li>
	</ul>
	
	When you close the Kaa client, be sure to unsubscribe from notification topics and remove NotificationTopicListListener.
	In this app we provide example for this action.
	
	<h1>Launching</h1>
	
	<p>
		To launch this sample application on the Kaa Java SDK, you need to prepare your Java SDK environment.
		To do this, follow the instructions in <a href="./Programming-guide/Using-Kaa-endpoint-SDKs/Java/">Using Kaa endpoint SDKs</a>.
	</p>
	
	<p>
		For sample applications that utilize Kaa Java SDK, both the binary files (.jar archive) and the source code (.tar.gz archive) are available for download.
		If you want to only launch the sample application, download the binary files.
		If you want to explore the source code of the sample application, download the source code archive.
	</p>
	
	<h2>Install using the binary files</h2>
	
	To install the Notification sample application using the binary files:
		
	<ol>
		<li>
			Click the <b>Binary</b> button.
			A binary build window will open.
			Click <b>Ok</b> and download the .jar file.
		</li>
		<li>
			Run the following command from the directory containing the downloaded .jar archive.
			
			<pre>
				$ java -jar NotificationDemo.jar 	
			</pre>
			
			The sample application console will display the startup message.
									
		</li>
	</ol>
	
	<h2>Install using the source code</h2>
	
	To install the Notification sample application using the source code:
	
	<ol>
		<li>
			Click the <b>Source</b> button.
			A project source download window will open.
			Click <b>Ok</b> and download the .tar.gz file.
		</li>
		<li>
			Unpack the downloaded archive.
		</li>
		<li>
			To build from new sources you need to have Apache Ant installed on your host machine.
			To install Apache ant, run the following command from the directory containing the unpacked sources.
			
			<pre>
				$ ant debug
			</pre>
			
			To launch the sample application from the previously built sources run the following command from the directory containing the sources.
			
			<pre>
				$ java -jar build/jar/Notification.jar
			</pre>
		</li>
	</ol>
		
	If you want to modify the sample application source code or create your own applications using the Kaa platform, see <a href="./Programming-guide/Your-first-Kaa-application/">Your first Kaa application</a>.
	
	<h1>Troubleshooting</h1>
	
	For troubleshooting information, see <a href="./Administration-guide/Troubleshooting/">Troubleshooting</a>.
</body>
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>JAVA</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86 WINDOWS_X86</platforms>
        <features>NOTIFICATION</features>
        <complexity>BASIC</complexity>
        <bundleId>notification_demos</bundleId>
        <sourceArchive>java/notification_demo.tar.gz</sourceArchive>
        <projectFolder>JNotificationDemo</projectFolder>
        <sdkLibDir>JNotificationDemo/lib</sdkLibDir>
        <destBinaryFile>JNotificationDemo/build/jar/NotificationDemo.jar</destBinaryFile>
    </project>
    <project id="notification_demo_cpp">
        <name>Notification C++ demo</name>
        <description>Kaa Notification subsystem demo app based on C++ SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Notification subsystem on the C++ SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Notification C++ demo" app, you will receive two notification topics — one of which is mandatory and another is optional. Notifications on the mandatory topic will be delivered automatically. Notifications on optional topics require subscription, and this demo application will subscribe to the received optional topic automatically. Consequently, the application will receive notifications on the optional topic too.<br/><br/>

You can also create your own topics and send notifications. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Notification demo" application, then select "Notification topics". From here you can manage topics and send notifications. Do not forget to assign newly created topics to the "all" endpoint group - otherwise the endpoint will not be able to receive notifications on these topics.

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Notification subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>CPP</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>NOTIFICATION</features>
        <complexity>BASIC</complexity>
        <bundleId>notification_demos</bundleId>
        <sourceArchive>cpp/notification_demo.tar.gz</sourceArchive>
        <projectFolder>CppNotificationDemo</projectFolder>
        <sdkLibDir>CppNotificationDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="notification_demo_c">
        <name>Notification C demo</name>
        <description>Kaa Notification subsystem demo app based on C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Notification subsystem on the C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh deploy
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Notification C demo" app, you will receive two notification topics — one of which is mandatory and another is optional. Notifications on the mandatory topic will be delivered automatically. Notifications on optional topics require subscription, and this demo application will subscribe to the received optional topic automatically. Consequently, the application will receive notifications on the optional topic too.<br/><br/>

You can also create your own topics and send notifications. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Notification demo" application, then select "Notification topics". From here you can manage topics and send notifications. Do not forget to assign newly created topics to the "all" endpoint group - otherwise the endpoint will not be able to receive notifications on these topics.

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Notification subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>C</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>LINUX_X86</platforms>
        <features>NOTIFICATION</features>
        <complexity>BASIC</complexity>
        <bundleId>notification_demos</bundleId>
        <sourceArchive>c/notification_demo.tar.gz</sourceArchive>
        <projectFolder>CNotificationDemo</projectFolder>
        <sdkLibDir>CNotificationDemo/libs/kaa</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <project id="notification_demo_android">
        <name>Notification Android demo</name>
        <description>Kaa Notification subsystem demo app for Android</description>
        <details>
            <![CDATA[
This simple app demonstrates the capabilities of the Kaa Notification subsystem for Android.

<h2>Installation</h2>
Download the .apk to your Android device by clicking the "Binary" button on the left. Make sure that the device permits installing apps from "Unknown sources". Open the downloaded apk and follow the on-screen instructions.

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Notification Android demo" app, you will receive two notification topics accessible by the endpoint — one of which is mandatory and another is optional. A notification on the mandatory topic will be delivered automatically. Notifications on optional topics usually require subscription, but this demo application will subscribe to the received optional topic automatically. Consequently, the application will receive a notification on the optional topic too.<br/><br/>

You can also create your own topics and send notifications. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Android Notification demo" application, then select "Notification topics". From here you can manage topics and send notifications. Do not forget to assign newly created topics to the "all" endpoint group - otherwise the endpoint will not be able to receive notifications on these topics.

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Notification subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>

        <!-- Specifies the source code language of Kaa endpoint SDK which is used by this project 
             (ex. JAVA, CPP, etc., to get list of all possible options
             see 'sdkLanguage' type in demo_projects_schema.xsd schema) -->

        <sdkLanguage>JAVA</sdkLanguage>

        <!-- Specifies the target runtime platforms according to the instructions from the project details section
             (ex. LINUX_X86, ANDROID, IOS, ESP8266, etc., to get list of all possible options
             see 'platform' type in demo_projects_schema.xsd schema) -->

        <platforms>ANDROID</platforms>
        <features>NOTIFICATION</features>
        <complexity>BASIC</complexity>
        <bundleId>notification_demos</bundleId>
        <sourceArchive>android/notification_demo.tar.gz</sourceArchive>
        <projectFolder>notification_demo/NotificationDemo</projectFolder>
        <sdkLibDir>notification_demo/NotificationDemo/libs</sdkLibDir>
        <destBinaryFile>notification_demo/NotificationDemo/bin/KaaNotificationDemo-debug.apk</destBinaryFile>
    </project>
    <project id="notification_demo_objc">
        <name>Notification Objective-C demo</name>
        <description>Kaa Notification subsystem demo app based on Objective-C SDK</description>
        <details>
            <![CDATA[
This simple app demonstrates capabilities of the Kaa Notification subsystem on the Objective-C SDK.

<h2>Installation</h2>
Download the source code by clicking the "Source" button on the left. Unpack the downloaded archive and run the application using the following command in the console:
<pre>
$ ./build.sh
</pre>

<h2>Playing around</h2>
Make sure that the Kaa Sandbox is up and running. After starting the "Notification Objective-C demo" app, you will receive two notification topics — one of which is mandatory and another is optional. Notifications on the mandatory topic will be delivered automatically. Notifications on optional topics require subscription, and this demo application will subscribe to the received optional topic automatically. Consequently, the application will receive notifications on the optional topic too.<br/><br/>

You can also create your own topics and send notifications. Navigate to the Kaa server administrative interface by clicking the "Administrative console" link at the top of the Sandbox window. Log in as a tenant developer (devuser / devuser123), and navigate to the "Notification demo" application, then select "Notification topics". From here you can manage topics and send notifications. Do not forget to assign newly created topics to the "all" endpoint group - otherwise the endpoint will not be able to receive notifications on these topics.

Please note that all the features of Administration UI are also supported by REST API.

<h2>What's next?</h2>

For more background on the Kaa Notification subsystem please refer to the corresponding programming guide and design reference sections.
            ]]>
        </details>
        <sdkLanguage>OBJC</sdkLanguage>
        <platforms>IOS</platforms>
        <features>NOTIFICATION</features>
        <complexity>BASIC</complexity>
        <bundleId>notification_demos</bundleId>
        <sourceArchive>objc/notification_demo.tar.gz</sourceArchive>
        <projectFolder>ObjCNotificationDemo</projectFolder>
        <sdkLibDir>ObjCNotificationDemo/libs</sdkLibDir>
        <destBinaryFile></destBinaryFile>
    </project>
    <bundle id="notification_demos">
        <name>Notification demos</name>
        <description>Kaa Notification subsystem demo applications bundle</description>
        <details>
            <![CDATA[
This bundle contains applications that demonstrates capabilities of the Kaa Notification subsystem.

Please note that all the features of <a href="http://docs.kaaproject.org/display/KAA/Administration+UI+guide">Administrative UI</a> are also supported by <a href="http://docs.kaaproject.org/display/KAA/Admin+REST+API">REST API</a>.

<h2>What's next?</h2>
For more background on the Kaa Notification subsystem please refer to the corresponding <a href="http://docs.kaaproject.org/display/KAA/Using+notifications">programming guide</a> and <a href="http://docs.kaaproject.org/display/KAA/Notifications">design reference</a> sections.
]]>
        </details>
    </bundle>
</projectsConfig>
